// <auto-generated />
using System;
using CiberCafeColibriAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CiberCafeColibriAPI.Migrations
{
    [DbContext(typeof(ColibriContext))]
    [Migration("20230621052846_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Categorias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Categorias = "Comida"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Categorias = "Bebida"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Categorias = "Computadora"
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("ApellidosCliente")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombresCliente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RUC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ClienteId = 125,
                            ApellidosCliente = "Reyes Cortés",
                            Direccion = "Del parque Alfonso Mayor 1c al sur",
                            NombresCliente = "Anderson",
                            RUC = "193258476212",
                            Telefono = 23459786
                        },
                        new
                        {
                            ClienteId = 135,
                            ApellidosCliente = "Lopez Perez",
                            Direccion = "Del parque Caña Verde 3c al sur",
                            NombresCliente = "Oscar",
                            RUC = "103258565373",
                            Telefono = 23459786
                        },
                        new
                        {
                            ClienteId = 145,
                            ApellidosCliente = "Martínez Ortis",
                            Direccion = "De los talleres modernos 5c al sur y 1c arriba",
                            NombresCliente = "Jeremy",
                            RUC = "17482147456",
                            Telefono = 47421839
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Compra", b =>
                {
                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<string>("SereiComprobante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("CompraId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Compras");

                    b.HasData(
                        new
                        {
                            CompraId = 1,
                            Fecha = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 1,
                            SereiComprobante = "FA11",
                            Total = 215.00m
                        },
                        new
                        {
                            CompraId = 2,
                            Fecha = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 2,
                            SereiComprobante = "FA20",
                            Total = 225.50m
                        },
                        new
                        {
                            CompraId = 3,
                            Fecha = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 3,
                            SereiComprobante = "FA17",
                            Total = 105.00m
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DashBoard", b =>
                {
                    b.Property<int>("DashBoardId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriasId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int?>("IMarcaId")
                        .HasColumnType("int");

                    b.Property<int>("MarcasId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalVentas")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("DashBoardId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("IMarcaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("DashBoards");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DetallesCompra", b =>
                {
                    b.Property<int>("DetalleCompraId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("DetalleCompraId");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesCompras");

                    b.HasData(
                        new
                        {
                            DetalleCompraId = 1,
                            Cantidad = 35,
                            CompraId = 1,
                            PrecioCompra = 20.55m,
                            ProductoId = 2,
                            SubTotal = 15m
                        },
                        new
                        {
                            DetalleCompraId = 2,
                            Cantidad = 20,
                            CompraId = 2,
                            PrecioCompra = 250.00m,
                            ProductoId = 7,
                            SubTotal = 5m
                        },
                        new
                        {
                            DetalleCompraId = 3,
                            Cantidad = 54,
                            CompraId = 3,
                            PrecioCompra = 11.10m,
                            ProductoId = 5,
                            SubTotal = 12m
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DetallesVenta", b =>
                {
                    b.Property<int>("DetalleVentaId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.Property<int?>("VentasId")
                        .HasColumnType("int");

                    b.HasKey("DetalleVentaId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentasId");

                    b.ToTable("DetalleVentas");

                    b.HasData(
                        new
                        {
                            DetalleVentaId = 1,
                            Cantidad = 25,
                            PrecioVenta = 15.00m,
                            ProductoId = 1,
                            SubTotal = 10m,
                            VentaId = 1
                        },
                        new
                        {
                            DetalleVentaId = 2,
                            Cantidad = 55,
                            PrecioVenta = 9.95m,
                            ProductoId = 4,
                            SubTotal = 15m,
                            VentaId = 2
                        },
                        new
                        {
                            DetalleVentaId = 3,
                            Cantidad = 45,
                            PrecioVenta = 15.00m,
                            ProductoId = 3,
                            SubTotal = 10m,
                            VentaId = 3
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpleadoId"));

                    b.Property<string>("ApellidosEmpleados")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contraseña")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("DNI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombresEmpleado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salario")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Telofono")
                        .HasColumnType("int");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("RolId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            ApellidosEmpleados = "Patricia",
                            Contraseña = "BAS0001",
                            DNI = "ASD1205FG",
                            Direccion = "De los talleres modernos 3c al sur 1/2c arriba",
                            NombresEmpleado = "Karla",
                            RolId = 1000,
                            Salario = 8000m,
                            Telofono = 22556677
                        },
                        new
                        {
                            EmpleadoId = 2,
                            ApellidosEmpleados = "Galán Blanco",
                            Contraseña = "P41lo+fr1zz0",
                            DNI = "BSA2004FG",
                            Direccion = "Del reparto Tres fuentes 2c arriba y 1c al sur",
                            NombresEmpleado = "Marcus",
                            RolId = 1404,
                            Salario = 7000m,
                            Telofono = 19384762
                        },
                        new
                        {
                            EmpleadoId = 3,
                            ApellidosEmpleados = "Torres Ferguson",
                            Contraseña = "l4Ma¿37hA",
                            DNI = "AC3056DF",
                            Direccion = "De la refresquería Mi Niño 1c al sur y 3c abajo",
                            NombresEmpleado = "Eleazar Santiago",
                            RolId = 1303,
                            Salario = 6000m,
                            Telofono = 91827345
                        },
                        new
                        {
                            EmpleadoId = 4,
                            ApellidosEmpleados = "Rodríguez Rodríguez",
                            Contraseña = "Tra00pe1l1a2d04",
                            DNI = "RG7623BD",
                            Direccion = "Del multicentro Las Pepitas 2c al lago",
                            NombresEmpleado = "Juan Pedro",
                            RolId = 2000,
                            Salario = 5000m,
                            Telofono = 12209345
                        },
                        new
                        {
                            EmpleadoId = 5,
                            ApellidosEmpleados = "Puentes Contreras",
                            Contraseña = "Añesartnoc",
                            DNI = "QE1203AS",
                            Direccion = "Del parque Alfonso Mayor 5c al sur",
                            NombresEmpleado = "Alejandro",
                            RolId = 1001,
                            Salario = 4000m,
                            Telofono = 98761243
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Marca", b =>
                {
                    b.Property<int>("IMarcaId")
                        .HasColumnType("int");

                    b.Property<string>("Marcas")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IMarcaId");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            IMarcaId = 1,
                            Marcas = "Krispy Kreme"
                        },
                        new
                        {
                            IMarcaId = 2,
                            Marcas = "Crisco"
                        },
                        new
                        {
                            IMarcaId = 3,
                            Marcas = "Grupo Bimbo"
                        },
                        new
                        {
                            IMarcaId = 4,
                            Marcas = "Café las Flores"
                        },
                        new
                        {
                            IMarcaId = 5,
                            Marcas = "Café Presto"
                        },
                        new
                        {
                            IMarcaId = 6,
                            Marcas = "Casa del Café"
                        },
                        new
                        {
                            IMarcaId = 7,
                            Marcas = "Coca Cola"
                        },
                        new
                        {
                            IMarcaId = 8,
                            Marcas = "Pepsi"
                        },
                        new
                        {
                            IMarcaId = 9,
                            Marcas = "Apple"
                        },
                        new
                        {
                            IMarcaId = 10,
                            Marcas = "HP"
                        },
                        new
                        {
                            IMarcaId = 11,
                            Marcas = "Razer"
                        },
                        new
                        {
                            IMarcaId = 12,
                            Marcas = "Microsoft Surface"
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Nomina", b =>
                {
                    b.Property<int>("NomindaId")
                        .HasColumnType("int");

                    b.Property<decimal>("AdelantoSueldo")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("BonoTransporte")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("HorasExtras")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PagoHorasExtras")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("PrecioHorasExtras")
                        .HasColumnType("int");

                    b.Property<decimal>("SalarioBruto")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("SalarioNeto")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("SeguroMedico")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalAsignaciones")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalDeducciones")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("NomindaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Nominas");

                    b.HasData(
                        new
                        {
                            NomindaId = 1,
                            AdelantoSueldo = 200m,
                            Apellido = "Patricia",
                            BonoTransporte = 100m,
                            EmpleadoId = 1,
                            HorasExtras = 10,
                            Nombre = "Karla",
                            PagoHorasExtras = 500m,
                            PrecioHorasExtras = 50,
                            SalarioBruto = 8000m,
                            SalarioNeto = 8300m,
                            SeguroMedico = 500m,
                            TotalAsignaciones = 600m,
                            TotalDeducciones = 300m
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("MarcaId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = 1,
                            CategoriaId = 1,
                            Descripcion = "Dona glaseada",
                            Estado = "Con Etiqueta",
                            MarcaId = 1,
                            PrecioCompra = 12.50m,
                            PrecioVenta = 15.00m,
                            Stock = 25
                        },
                        new
                        {
                            ProductoId = 2,
                            CategoriaId = 1,
                            Descripcion = "Pan Bimbo artesano",
                            Estado = "Con Etiqueta",
                            MarcaId = 3,
                            PrecioCompra = 20.55m,
                            PrecioVenta = 21.00m,
                            Stock = 35
                        },
                        new
                        {
                            ProductoId = 3,
                            CategoriaId = 2,
                            Descripcion = "Taza de café capucchino",
                            Estado = "Como Nuevo",
                            MarcaId = 5,
                            PrecioCompra = 10.50m,
                            PrecioVenta = 15.00m,
                            Stock = 45
                        },
                        new
                        {
                            ProductoId = 4,
                            CategoriaId = 2,
                            Descripcion = "Taza de café negro",
                            Estado = "Semi Nuevo",
                            MarcaId = 4,
                            PrecioCompra = 7.50m,
                            PrecioVenta = 9.95m,
                            Stock = 55
                        },
                        new
                        {
                            ProductoId = 5,
                            CategoriaId = 2,
                            Descripcion = "Vaso de gaseosa",
                            Estado = "Como Nuevo",
                            MarcaId = 8,
                            PrecioCompra = 11.10m,
                            PrecioVenta = 15.00m,
                            Stock = 54
                        },
                        new
                        {
                            ProductoId = 6,
                            CategoriaId = 3,
                            Descripcion = "Computadora portátil (Razer)",
                            Estado = "Como Nuevo",
                            MarcaId = 11,
                            PrecioCompra = 300.00m,
                            PrecioVenta = 350.00m,
                            Stock = 15
                        },
                        new
                        {
                            ProductoId = 7,
                            CategoriaId = 3,
                            Descripcion = "Computadora portátil (Microsoft Surface)",
                            Estado = "Semi Nuevo",
                            MarcaId = 12,
                            PrecioCompra = 250.00m,
                            PrecioVenta = 275.00m,
                            Stock = 20
                        },
                        new
                        {
                            ProductoId = 8,
                            CategoriaId = 3,
                            Descripcion = "Computadora portátil (HP)",
                            Estado = "Con Imperfecciones",
                            MarcaId = 10,
                            PrecioCompra = 195.50m,
                            PrecioVenta = 200.00m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RUC")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            ProveedorId = 1,
                            Direccion = "Del puente Pablito 1c al lago",
                            RUC = "29432100457",
                            RazonSocial = "Arus Soda Resale, S.A.",
                            Telefono = 19932651
                        },
                        new
                        {
                            ProveedorId = 2,
                            Direccion = "De los talleres modernos 1c al sur 4c arriba",
                            RUC = "57102110407",
                            RazonSocial = "Servicios de Repostería, S.A.",
                            Telefono = 10037158
                        },
                        new
                        {
                            ProveedorId = 3,
                            Direccion = "Calle principal de altamira, del bdf 1/2 c al sur",
                            RUC = "10501219320",
                            RazonSocial = "Tienda de Computación Sevasa, S.A.",
                            Telefono = 36912153
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("RolesEmpleado")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolId = 1000,
                            RolesEmpleado = "Encargada general de informática"
                        },
                        new
                        {
                            RolId = 1404,
                            RolesEmpleado = "Mesero"
                        },
                        new
                        {
                            RolId = 1303,
                            RolesEmpleado = "Cajero"
                        },
                        new
                        {
                            RolId = 2000,
                            RolesEmpleado = "Conserje"
                        },
                        new
                        {
                            RolId = 9009,
                            RolesEmpleado = "Gerente"
                        },
                        new
                        {
                            RolId = 2112,
                            RolesEmpleado = "Contador"
                        },
                        new
                        {
                            RolId = 1001,
                            RolesEmpleado = "Encargado general de compras"
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "luisacrossway@gmail.com",
                            Password = 12345678,
                            Role = "Administrador",
                            UserName = "Luisa"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ngomezanderson@gmail.com",
                            Password = 87654321,
                            Role = "Contador",
                            UserName = "Nelio"
                        },
                        new
                        {
                            Id = 3,
                            Email = "gabielurcuyo14@gmail.com",
                            Password = 9786543,
                            Role = "Economista",
                            UserName = "Ernesto"
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Venta", b =>
                {
                    b.Property<int>("VentasId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerieComprobante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoComprobante")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("VentasId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Ventas");

                    b.HasData(
                        new
                        {
                            VentasId = 1,
                            ClienteId = 125,
                            EmpleadoId = 1,
                            Fecha = new DateTime(2020, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerieComprobante = "FA01",
                            TipoComprobante = "Factura",
                            Total = 250.50m
                        },
                        new
                        {
                            VentasId = 2,
                            ClienteId = 135,
                            EmpleadoId = 2,
                            Fecha = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerieComprobante = "FA02",
                            TipoComprobante = "Factura",
                            Total = 200.55m
                        },
                        new
                        {
                            VentasId = 3,
                            ClienteId = 145,
                            EmpleadoId = 4,
                            Fecha = new DateTime(2020, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerieComprobante = "FA03",
                            TipoComprobante = "Factura",
                            Total = 200.00m
                        });
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Compra", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Proveedor", "proveedores")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("proveedores");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DashBoard", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Categoria", "Categorias")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("CiberCafeColibriAPI.Models.Cliente", "Clientes")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Empleado", "Empleados")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Marca", "Marcas")
                        .WithMany()
                        .HasForeignKey("IMarcaId");

                    b.HasOne("CiberCafeColibriAPI.Models.Producto", "productos")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Proveedor", "Proveedores")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("Clientes");

                    b.Navigation("Empleados");

                    b.Navigation("Marcas");

                    b.Navigation("Proveedores");

                    b.Navigation("productos");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DetallesCompra", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Compra", "Compras")
                        .WithMany()
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Producto", "productos")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compras");

                    b.Navigation("productos");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.DetallesVenta", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Producto", "Productos")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Venta", "Ventas")
                        .WithMany()
                        .HasForeignKey("VentasId");

                    b.Navigation("Productos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Empleado", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Rol", "Roles")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Nomina", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Producto", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Categoria", "Categorias")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Marca", "Marcas")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("Marcas");
                });

            modelBuilder.Entity("CiberCafeColibriAPI.Models.Venta", b =>
                {
                    b.HasOne("CiberCafeColibriAPI.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CiberCafeColibriAPI.Models.Empleado", "Empleados")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
